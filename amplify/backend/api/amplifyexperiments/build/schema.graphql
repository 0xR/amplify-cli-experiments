type Attribute {
  key: String!
  value: String!
}

type Product {
  id: ID!
  title: String!
  price: Int!
  description: String!
  stock: Int!
  attributes: [Attribute!]!
}

type Category {
  id: ID!
  name: String!
  childCategories(filter: ModelCategoryRelationFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCategoryRelationConnection
  parentCategories(filter: ModelCategoryRelationFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCategoryRelationConnection
}

type CategoryRelation {
  id: ID!
  parent: Category!
  child: Category!
}

input AttributeInput {
  key: String!
  value: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelProductConnection {
  items: [Product]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelProductFilterInput {
  id: ModelIDFilterInput
  title: ModelStringFilterInput
  price: ModelIntFilterInput
  description: ModelStringFilterInput
  stock: ModelIntFilterInput
  and: [ModelProductFilterInput]
  or: [ModelProductFilterInput]
  not: ModelProductFilterInput
}

type Query {
  getProduct(id: ID!): Product
  listProducts(filter: ModelProductFilterInput, limit: Int, nextToken: String): ModelProductConnection
  getCategory(id: ID!): Category
  listCategorys(filter: ModelCategoryFilterInput, limit: Int, nextToken: String): ModelCategoryConnection
  searchProducts(filter: SearchableProductFilterInput, sort: SearchableProductSortInput, limit: Int, nextToken: Int): SearchableProductConnection
}

input CreateProductInput {
  id: ID
  title: String!
  price: Int!
  description: String!
  stock: Int!
  attributes: [AttributeInput!]!
}

input UpdateProductInput {
  id: ID!
  title: String
  price: Int
  description: String
  stock: Int
  attributes: [AttributeInput!]
}

input DeleteProductInput {
  id: ID
}

type Mutation {
  createProduct(input: CreateProductInput!): Product
  updateProduct(input: UpdateProductInput!): Product
  deleteProduct(input: DeleteProductInput!): Product
  createCategory(input: CreateCategoryInput!): Category
  updateCategory(input: UpdateCategoryInput!): Category
  deleteCategory(input: DeleteCategoryInput!): Category
  createCategoryRelation(input: CreateCategoryRelationInput!): CategoryRelation
  updateCategoryRelation(input: UpdateCategoryRelationInput!): CategoryRelation
  deleteCategoryRelation(input: DeleteCategoryRelationInput!): CategoryRelation
}

type Subscription {
  onCreateProduct: Product @aws_subscribe(mutations: ["createProduct"])
  onUpdateProduct: Product @aws_subscribe(mutations: ["updateProduct"])
  onDeleteProduct: Product @aws_subscribe(mutations: ["deleteProduct"])
  onCreateCategory: Category @aws_subscribe(mutations: ["createCategory"])
  onUpdateCategory: Category @aws_subscribe(mutations: ["updateCategory"])
  onDeleteCategory: Category @aws_subscribe(mutations: ["deleteCategory"])
  onCreateCategoryRelation: CategoryRelation @aws_subscribe(mutations: ["createCategoryRelation"])
  onUpdateCategoryRelation: CategoryRelation @aws_subscribe(mutations: ["updateCategoryRelation"])
  onDeleteCategoryRelation: CategoryRelation @aws_subscribe(mutations: ["deleteCategoryRelation"])
}

type ModelCategoryConnection {
  items: [Category]
  nextToken: String
}

input ModelCategoryFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [ModelCategoryFilterInput]
  or: [ModelCategoryFilterInput]
  not: ModelCategoryFilterInput
}

input CreateCategoryInput {
  id: ID
  name: String!
}

input UpdateCategoryInput {
  id: ID!
  name: String
}

input DeleteCategoryInput {
  id: ID
}

input CreateCategoryRelationInput {
  id: ID
  categoryRelationParentId: ID!
  categoryRelationChildId: ID!
}

input UpdateCategoryRelationInput {
  id: ID!
  categoryRelationParentId: ID
  categoryRelationChildId: ID
}

input DeleteCategoryRelationInput {
  id: ID
}

type ModelCategoryRelationConnection {
  items: [CategoryRelation]
  nextToken: String
}

input ModelCategoryRelationFilterInput {
  id: ModelIDFilterInput
  and: [ModelCategoryRelationFilterInput]
  or: [ModelCategoryRelationFilterInput]
  not: ModelCategoryRelationFilterInput
}

input SearchableStringFilterInput {
  ne: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
}

input SearchableIDFilterInput {
  ne: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableProductFilterInput {
  id: SearchableIDFilterInput
  title: SearchableStringFilterInput
  price: SearchableIntFilterInput
  description: SearchableStringFilterInput
  stock: SearchableIntFilterInput
  and: [SearchableProductFilterInput]
  or: [SearchableProductFilterInput]
  not: SearchableProductFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableProductSortableFields {
  id
  title
  price
  description
  stock
}

input SearchableProductSortInput {
  field: SearchableProductSortableFields
  direction: SearchableSortDirection
}

type SearchableProductConnection {
  items: [Product]
  nextToken: String
}
